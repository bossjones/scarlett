#!/usr/bin/env python

# Define number of MINIMUM worker threads.
# During bootstrap of HA (see bootstrap.from_config_dict()) worker threads
# will be added for each component that polls devices.
MIN_WORKER_THREAD = 2

import signal
gobjectnotimported = False

try:
    import dbus
    import dbus.service
    from dbus.mainloop.glib import DBusGMainLoop
    from dbus.mainloop.glib import threads_init
    import subprocess
    from subprocess import call
    import gobject
    # Initialize gtk threading
    gobject.threads_init()
    # If the keyword argument set_as_default is given and is true, set the new
    # main loop as the default for all new Connection or Bus instances.
    threads_init()
    DBusGMainLoop(set_as_default=True)
    import pygst
    pygst.require('0.10')
    # gobject.threads_init()
    # threads_init()
    import scarlett
    from scarlett.constants import *
    from scarlett import __version__
    import scarlett.basics.voice
    from scarlett.basics.voice import Voice
    from scarlett.listener.gstlisteneri import GstListenerImproved
    from scarlett.basics.talk import ScarlettTalk
    import scarlett.basics.say as scarlett_says
except:
    gobjectnotimported = True

import logging
import argparse
import sys
# will use this to trace when functions begin and end
# see details from:
# http://stackoverflow.com/questions/308999/what-does-functools-wraps-do
import textwrap
from functools import wraps
import time

import pprint

import redis
from scarlett.brain.scarlettbraini import ScarlettBrainImproved

import ast

import scarlett.util as util

# drops you down into pdb if exception is thrown
import sys
from IPython.core import ultratb
sys.excepthook = ultratb.FormattedTB(
                        mode='Verbose',
                        color_scheme='Linux',
                        call_pdb=True,
                        ostream=sys.__stdout__
)

# trace decorator


def trace(func):
    """Tracing wrapper to log when function enter/exit happens.
    :param func: Function to wrap
    :type func: callable
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        logging.debug(Fore.GREEN + 'Start {!r}'. format(func.__name__))
        result = func(*args, **kwargs)
        logging.debug(Fore.GREEN + 'End {!r}'. format(func.__name__))
        return result
    return wrapper

# TODO: Add a callback to make changes to brain object
# TODO: Add a callback to run scarlett_says.say_block("BLAH")
# source:
# http://www.pygtk.org/articles/subclassing-gobject/sub-classing-gobject-in-python.htm

# TODO: Evaluate all dbus CLI setting options
# source:
# http://stackoverflow.com/questions/5819667/help-me-setup-a-cron-job-on-ubuntu


class ScarlettBotException(dbus.DBusException):
    _dbus_error_name = 'org.scarlettapp.scarlettbotexception'


class ScarlettBot(dbus.service.Object):

    """ Actual scarlett bot object that has a brain, voice, etc """

    DBUS_NAME = 'org.scarlettapp.scarlettdaemon'
    DBUS_PATH = '/org/scarlettapp/scarlettdaemon'

    _scarlett_services = []

    #loop = None

    def __init__(self):

        #session_bus = dbus.SessionBus()

        bus_name = dbus.service.BusName(
            'org.scarlettapp.scarlettdaemon',
            bus=dbus.SessionBus()
        )

        dbus.service.Object.__init__(
            self,
            bus_name,
            '/org/scarlettapp/scarlettdaemon'
        )

        self.loop = None
        # DISABLED FOR NOW # self.pool = pool = create_worker_pool()

        scarlett.set_stream_logger('scarlett')

        self.scarlett_version_info = textwrap.dedent('''\
                                           Scarlett {version} ({platform})
                                           Python {pymajor}.{pyminor}.{pymicro}
                                           PyGst {pygst_version}
                                           Gobject {gobject_version}
                                           '''.format(
            version=__version__,
            platform=sys.platform,
            pymajor=sys.version_info.major,
            pyminor=sys.version_info.minor,
            pymicro=sys.version_info.micro,
            pygst_version=pygst._pygst_version,
            gobject_version=gobject.gobject.glib_version
        ))

        scarlett.log.debug(
            Fore.GREEN +
            "VERSION INFO: \n\n" +
            self.scarlett_version_info
        )

        self._brain = ScarlettBrainImproved(
            host=scarlett.config.get('redis', 'host'),
            port=scarlett.config.get('redis', 'port'),
            db=scarlett.config.get('redis', 'db')
        )

        # enable services
        if scarlett_cli_args.enable_feature == "time":
            from scarlett.features.time import FeatureTime
            self.time = FeatureTime()
            self.time.connect(
                'time-started', self.scarlett_event_cb)
            self.time.start()

        scarlett.log.debug(Fore.GREEN + "Scarlett Creating Voice Object")

        # TODO: play_block pi-listening from emitted signal
        scarlett.basics.voice.play_block('pi-listening')

        # scarlett_says.say_block("helllllllllllloooo")

        #self.listener = GstListenerImproved("gst", self._brain, self._voice, False)

    #@trace
    def scarlett_event_cb(self, scarlett_obj, message):
        """Handle message send by webbrowser.

        :param scarlett_obj: ServiceFeature obj that sent the message
        :type scarlett_obj: scarlett.Feature
        :param message: Message containing event data
        :type message: dict

        """
        scarlett.log.debug(Fore.GREEN + "(service -> gtk) %s", message)

        # NOTE: ast.literal_eval raises an exception if the input isn't a
        # valid Python datatype, so the code won't be executed if it's not.
        # NOTE: Use ast.literal_eval whenever you need eval. If you
        # have Python expressions as an input that you want to
        # evaluate, you shouldn't (have them).
        event = ast.literal_eval(message)

        scarlett.log.debug(Fore.GREEN + "Bus:Handling %s",
                           event['event_type'])

        if event['event_type'] == 'service_state':
            scarlett.log.debug(Fore.GREEN +
                               "RECIEVED: service_state from time-started: {}".format(event['data']))
        else:
            raise ValueError('Unknown scarlettTime message: {}'.format(event))

    @dbus.service.method('org.scarlettapp.scarlettdaemon',
                         in_signature='', out_signature='')
    def main(self):
        """Main method used to start scarlett application."""
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        # OLD # gtk.main()
        # DISABLED FOR NOW # scarlett.log.info(Fore.GREEN +
        #    "Starting Home Assistant (%d threads)", self.pool.worker_count)

        self.loop = gobject.MainLoop()

        try:
            self.loop.run()
        except KeyboardInterrupt:
            self.Exit()

    @dbus.service.method('org.scarlettapp.scarlettdaemon',
                         in_signature='', out_signature='')
    def destroy(self):
        scarlett.log.debug(Fore.YELLOW + "Destroy signal occurred")
        self.remove_from_connection()
        self.loop.quit()  # OLD # gobject.mainloop.quit()

    @dbus.service.method("org.scarlettapp.scarlettdaemon",
                         in_signature='', out_signature='')
    def Exit(self):
        scarlett.log.debug(Fore.YELLOW + "Exit signal occurred")
        self.remove_from_connection()
        self.loop.quit()


def set_dbus_launch_shell():
    # source:
    # http://stackoverflow.com/questions/2143785/python-dbus-session-bus-x11-dependency
    p = subprocess.Popen('dbus-launch',
                         shell=True,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)

    for var in p.stdout:
        sp = var.split('=', 1)
        print sp
        os.environ[sp[0]] = sp[1][:-1]


def main():
    """Launch application."""
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s %(name)s [%(levelname)s]:%(message)s")

    #@trace
    def sigint_handler(*args):
        """Exit on Ctrl+C"""

        # Unregister handler, next Ctrl-C will kill app
        # TOD: figure out if this is really needed or not
        signal.signal(signal.SIGINT, signal.SIG_DFL)

        # self.loop.quit()
        # TODO: make voice play_free emit signal to voice class
        scarlett.basics.voice.play_free()
        scarlett_daemon.Exit()

    signal.signal(signal.SIGINT, sigint_handler)

    # create scarlett_daemon runner
    scarlett_daemon = ScarlettBot()

    try:

        scarlett_daemon.main()

    finally:

        scarlett.basics.voice.play_free()


class JobPriority(object):

    """ Provides priorities for bus events. """
    # pylint: disable=no-init,too-few-public-methods

    EVENT_CALLBACK = 0
    EVENT_SERVICE = 1
    EVENT_STATE = 2
    EVENT_TIME = 3
    EVENT_DEFAULT = 4

    @staticmethod
    def from_event_type(event_type):
        """ Returns a priority based on event type. """
        if event_type == EVENT_TIME_CHANGED:
            return JobPriority.EVENT_TIME
        elif event_type == EVENT_STATE_CHANGED:
            return JobPriority.EVENT_STATE
        elif event_type == EVENT_CALL_SERVICE:
            return JobPriority.EVENT_SERVICE
        elif event_type == EVENT_SERVICE_EXECUTED:
            return JobPriority.EVENT_CALLBACK
        elif event_type == EVENT_SCARLETT_SAY:
            return JobPriority.EVENT_CALLBACK
        elif event_type == EVENT_BRAIN_UPDATE:
            return JobPriority.EVENT_SERVICE
        elif event_type == EVENT_BRAIN_CHECK:
            return JobPriority.EVENT_STATE
        else:
            return JobPriority.EVENT_DEFAULT


def create_worker_pool():
    """ Creates a worker pool to be used. """

    def job_handler(job):
        """ Called whenever a job is available to do. """
        try:
            func, arg = job
            func(arg)
        except Exception:  # pylint: disable=broad-except
            # Catch any exception our service/event_listener might throw
            # We do not want to crash our ThreadPool
            scarlett.log.exception(Fore.RED +
                                   "BusHandler:Exception doing job")

    def busy_callback(worker_count, current_jobs, pending_jobs_count):
        """ Callback to be called when the pool queue gets too big. """

        scarlett.log.warning(
            Fore.YELLOW +
            "WorkerPool:All %d threads are busy and %d jobs pending",
            worker_count, pending_jobs_count)

        for start, job in current_jobs:
            scarlett.log.warning(Fore.YELLOW +
                                 "WorkerPool:Current job from %s: %s",
                                 util.datetime_to_str(start), job)

    return util.ThreadPool(job_handler, MIN_WORKER_THREAD, busy_callback)


# If the program is run directly or passed as an argument to the python
# interpreter then create a scarlettBot instance and show it
if __name__ == "__main__":
    # Set up and parse command-line args.
    global scarlett_cli_args
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--detect-session-bus", action="store_true", default=False)
    parser.add_argument("--enable-feature", default="time")

    scarlett_cli_args = parser.parse_args()

    if scarlett_cli_args.detect_session_bus:
        set_dbus_launch_shell()

    main()
