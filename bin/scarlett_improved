#!/usr/bin/env python

import signal
gobjectnotimported = False

try:
    from dbus.mainloop.glib import DBusGMainLoop
    # If the keyword argument set_as_default is given and is true, set the new main loop as the default for all new Connection or Bus instances.
    DBusGMainLoop(set_as_default=True)
    import gobject
    import pygst
    pygst.require('0.10')
    gobject.threads_init()
    import scarlett
    from scarlett.constants import *
    from scarlett import __version__
    import scarlett.basics.voice
    from scarlett.basics.voice import Voice
    from scarlett.listener.gstlisteneri import GstListenerImproved
    from scarlett.basics.talk import ScarlettTalk
    import scarlett.basics.say as scarlett_says
except:
    gobjectnotimported = True

import logging
import argparse
import sys
# will use this to trace when functions begin and end
# see details from: http://stackoverflow.com/questions/308999/what-does-functools-wraps-do
import textwrap
from functools import wraps
import time

import sys
from IPython.core import ultratb
sys.excepthook = ultratb.FormattedTB(mode='Verbose',
     color_scheme='Linux', call_pdb=1)

def trace(func):
    """Tracing wrapper to log when function enter/exit happens.
    :param func: Function to wrap
    :type func: callable
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        logging.debug(Fore.GREEN + 'Start {!r}'. format(func.__name__))
        result = func(*args, **kwargs)
        logging.debug(Fore.GREEN + 'End {!r}'. format(func.__name__))
        return result
    return wrapper

class ScarlettBot(object):
    """ Actual scarlett bot object that has a brain, voice, etc """

    _scarlett_services = []
    _last_send_time    = time.time()

    def __init__(self):
        self.loop = None
        scarlett.set_stream_logger('scarlett')
        scarlett.log.debug(Fore.GREEN + "Scarlett Creating Voice Object")
        self.scarlett_version_info = textwrap.dedent('''\
                                           Scarlett {version} ({platform})
                                           Python {pymajor}.{pyminor}.{pymicro}
                                           PyGst {pygst_version}
                                           '''.format(version=__version__,
                                                      platform=sys.platform,
                                                      pymajor=sys.version_info.major,
                                                      pyminor=sys.version_info.minor,
                                                      pymicro=sys.version_info.micro,
                                                      pygst_version=pygst._pygst_version))

        scarlett.log.debug(Fore.GREEN + "VERSION INFO: \n\n" + self.scarlett_version_info)
        scarlett.log.debug(Fore.YELLOW + "Creating Voice Object")
        self._brain = scarlett.connect_brain()
        self._voice = scarlett.connect_voice(self._brain)
        scarlett.basics.voice.play_block('pi-listening')
        #scarlett_says.say_block("helllllllllllloooo")
        self.listener = GstListenerImproved("gst", self._brain, self._voice, False)

    @trace
    def main(self):
        """Main method used to start scarlett application."""
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        # OLD # gtk.main()
        self.loop = gobject.MainLoop()

        try:
          self.loop.run()
        except KeyboardInterrupt:
            self.destroy()

    @trace
    def destroy(self):
        scarlett.log.debug(Fore.YELLOW + "Destroy signal occurred")
        # OLD # gtk.main_quit()
        self.loop.quit() # OLD # gobject.mainloop.quit()

def main():
    """Launch application."""
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s %(name)s [%(levelname)s]:%(message)s")

    @trace
    def sigint_handler(*args):
        """Exit on Ctrl+C"""
        #gtk.main_quit()
        self.loop.quit()

    signal.signal(signal.SIGINT, sigint_handler)

    scarlett_daemon = ScarlettBot()
    scarlett_daemon.main()

# If the program is run directly or passed as an argument to the python
# interpreter then create a HelloWorld instance and show it
if __name__ == "__main__":
    main()
