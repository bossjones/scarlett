#!/usr/bin/env python

import scarlett
from scarlett.constants import *
import scarlett.basics.voice
from scarlett.basics.voice import Voice
from scarlett.listener.gstlistener import *
#from IPython.core.debugger import Tracer
# this is very important, without this, callbacks from gstreamer thread
# will messed our program up
import gobject
gobject.threads_init()
import argparse

class ScarlettBot(object):
    """ Actual scarlett bot object that has a brain, voice, etc """

    _scarlett_services = []
    _last_send_time    = time.time()

    def __init__(self):
        scarlett.set_stream_logger('scarlett')
        scarlett.log.debug(Fore.YELLOW + "Creating Voice Object")
        #Tracer()()
        self._brain = scarlett.connect_brain()
        self._voice = scarlett.connect_voice(self._brain)
        scarlett.basics.voice.play_block('pi-listening')
        self.listener = GstListener("gst",self._brain,self._voice,False)

    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()

    def destroy(self):
        scarlett.log.debug(Fore.YELLOW + "Destroy signal occurred")
        gtk.main_quit()

# If the program is run directly or passed as an argument to the python
# interpreter then create a HelloWorld instance and show it
if __name__ == "__main__":
    scarlett_daemon = ScarlettBot()
    scarlett_daemon.main()
